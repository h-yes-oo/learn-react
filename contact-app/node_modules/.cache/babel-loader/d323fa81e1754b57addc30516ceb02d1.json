{"ast":null,"code":"var _jsxFileName = \"/Users/hyesoo/Desktop/learn-react/contact-app/src/App.js\";\nimport React, { Component } from 'react';\nimport PhoneForm from './components/PhoneForm';\nimport PhoneInfo from './components/PhoneInfo';\nimport PhoneInfoList from './components/PhoneInfoList';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.id = 0;\n    this.state = {\n      information: [{\n        id: 0,\n        name: '혜수',\n        phone: '010-5115-8097'\n      }, {\n        id: 1,\n        name: 'coco',\n        phone: '010-1234'\n      }]\n    };\n\n    this.handleCreate = data => {\n      //비구조 할당 문법을 사용하여 코드를 간소화, 가독성 높임\n      const {\n        information\n      } = this.state; // 리액트의 불변성을 유지하기 위해 !!\n\n      this.setState({\n        //비어있는 객체에 data와 id를 넣어준다\n        information: information.concat(Object.assign({}, data, {\n          id: this.id++\n        }))\n      });\n    };\n\n    this.handleRemove = id => {\n      const {\n        information\n      } = this.state;\n      this.setState({\n        information: information.filter(info => info.id !== id)\n      });\n    };\n\n    this.handleUpdate = (id, data) => {\n      const {\n        information\n      } = this.state;\n      this.setState({\n        information: information.map(info => {\n          if (info.id === id) {\n            return {\n              id,\n              ...data\n            };\n          }\n\n          return info;\n        })\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PhoneForm, {\n      onCreate: this.handleCreate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(PhoneInfoList, {\n      data: this.state.information,\n      onRemove: this.handleRemove,\n      onUpdate: this.handleUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/hyesoo/Desktop/learn-react/contact-app/src/App.js"],"names":["React","Component","PhoneForm","PhoneInfo","PhoneInfoList","App","id","state","information","name","phone","handleCreate","data","setState","concat","Object","assign","handleRemove","filter","info","handleUpdate","map","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AAEA,eAAe,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAGzCK,EAHyC,GAGpC,CAHoC;AAAA,SAKzCC,KALyC,GAKjC;AACNC,MAAAA,WAAW,EAAE,CACX;AACEF,QAAAA,EAAE,EAAE,CADN;AAEEG,QAAAA,IAAI,EAAE,IAFR;AAGEC,QAAAA,KAAK,EAAE;AAHT,OADW,EAMX;AACEJ,QAAAA,EAAE,EAAC,CADL;AAEEG,QAAAA,IAAI,EAAC,MAFP;AAGEC,QAAAA,KAAK,EAAE;AAHT,OANW;AADP,KALiC;;AAAA,SAqBzCC,YArByC,GAqBzBC,IAAD,IAAU;AACvB;AACA,YAAM;AAAEJ,QAAAA;AAAF,UAAkB,KAAKD,KAA7B,CAFuB,CAGvB;;AACA,WAAKM,QAAL,CAAc;AACZ;AACAL,QAAAA,WAAW,EAAEA,WAAW,CAACM,MAAZ,CAAmBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,IAAlB,EAAwB;AACtDN,UAAAA,EAAE,EAAE,KAAKA,EAAL;AADkD,SAAxB,CAAnB;AAFD,OAAd;AAMD,KA/BwC;;AAAA,SAiCzCW,YAjCyC,GAiCzBX,EAAD,IAAQ;AACrB,YAAM;AAAEE,QAAAA;AAAF,UAAkB,KAAKD,KAA7B;AACA,WAAKM,QAAL,CAAc;AACZL,QAAAA,WAAW,EAAEA,WAAW,CAACU,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACb,EAAL,KAAYA,EAAvC;AADD,OAAd;AAGD,KAtCwC;;AAAA,SAwCzCc,YAxCyC,GAwC1B,CAACd,EAAD,EAAIM,IAAJ,KAAa;AAC1B,YAAM;AAAEJ,QAAAA;AAAF,UAAkB,KAAKD,KAA7B;AACA,WAAKM,QAAL,CAAc;AACZL,QAAAA,WAAW,EAAEA,WAAW,CAACa,GAAZ,CACXF,IAAI,IAAI;AACN,cAAGA,IAAI,CAACb,EAAL,KAAYA,EAAf,EAAkB;AAChB,mBAAO;AACLA,cAAAA,EADK;AAEL,iBAAGM;AAFE,aAAP;AAID;;AACD,iBAAOO,IAAP;AACD,SATU;AADD,OAAd;AAaD,KAvDwC;AAAA;;AAyDzCG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAW,MAAA,QAAQ,EAAE,KAAKX,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWC,WAAhC;AAA6C,MAAA,QAAQ,EAAE,KAAKS,YAA5D;AAA0E,MAAA,QAAQ,EAAI,KAAKG,YAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAhEwC","sourcesContent":["import React, { Component } from 'react'\nimport PhoneForm from './components/PhoneForm'\nimport PhoneInfo from './components/PhoneInfo';\nimport PhoneInfoList from './components/PhoneInfoList'\n\nexport default class App extends Component {\n\n  //id 값은 렌더링되는 값이 아니기때문에 굳이 state에 넣어주지 않아도 된다\n  id = 0;\n\n  state = {\n    information: [\n      {\n        id: 0,\n        name: '혜수',\n        phone: '010-5115-8097'\n      },\n      {\n        id:1,\n        name:'coco',\n        phone: '010-1234'\n      }\n\n    ],\n  }\n\n  handleCreate = (data) => {\n    //비구조 할당 문법을 사용하여 코드를 간소화, 가독성 높임\n    const { information } = this.state;\n    // 리액트의 불변성을 유지하기 위해 !!\n    this.setState({\n      //비어있는 객체에 data와 id를 넣어준다\n      information: information.concat(Object.assign({}, data, {\n        id: this.id++\n      }))\n    });\n  }\n\n  handleRemove = (id) => {\n    const { information } = this.state;\n    this.setState({\n      information: information.filter(info => info.id !== id)\n    });\n  }\n\n  handleUpdate = (id,data) => {\n    const { information } = this.state;\n    this.setState({\n      information: information.map(\n        info => {\n          if(info.id === id){\n            return {\n              id,\n              ...data,\n            };\n          }\n          return info;\n        }\n      )\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <PhoneForm onCreate={this.handleCreate}/>\n        <PhoneInfoList data={this.state.information} onRemove={this.handleRemove} onUpdate = {this.handleUpdate} />\n      </div>\n    )\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}